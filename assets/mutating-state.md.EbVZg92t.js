import{_ as s,c as a,o as i,a3 as e}from"./chunks/framework.BL4Hpg-v.js";const n="/proven-pinia-patterns/assets/mutating-state-1.OA-heedt.jpg",t="/proven-pinia-patterns/assets/mutating-state-2.BC06OEy2.jpg",l="/proven-pinia-patterns/assets/mutating-state-3.DyL0gqQ2.jpg",m=JSON.parse('{"title":"Mutando el Estado","description":"","frontmatter":{},"headers":[],"relativePath":"mutating-state.md","filePath":"mutating-state.md"}'),p={name:"mutating-state.md"},h=e(`<h1 id="mutando-el-estado" tabindex="-1">Mutando el Estado <a class="header-anchor" href="#mutando-el-estado" aria-label="Permalink to &quot;Mutando el Estado&quot;">‚Äã</a></h1><p>En la √∫ltima lecci√≥n, vimos c√≥mo podemos acceder al estado desde Pinia y tambi√©n c√≥mo podemos usar <code>v-model</code> para vincular propiedades de estado en una tienda de Pinia. Ahora hablemos de mutaci√≥n de estado.</p><h2 id="mutando-el-estado-1" tabindex="-1">Mutando el Estado <a class="header-anchor" href="#mutando-el-estado-1" aria-label="Permalink to &quot;Mutando el Estado&quot;">‚Äã</a></h2><p>Aqu√≠ es donde Pinia se vuelve un poco... controvertida. Pinia nos permite mutar el estado de varias maneras, permiti√©ndonos decidir d√≥nde y cu√°ndo queremos actualizar el estado en nuestra aplicaci√≥n. Otras bibliotecas de administraci√≥n de estado son mucho m√°s estrictas sobre c√≥mo se cambia el estado.</p><blockquote><p>Por ejemplo, la antigua biblioteca oficial de gesti√≥n de estado de Vue, <a href="https://vuex.vuejs.org/" target="_blank" rel="noreferrer">Vuex</a>, requer√≠a que los cambios de estado se iniciaran mediante el env√≠o de una acci√≥n para cometer una mutaci√≥n; esa era la √∫nica forma de cambiar de estado (a menos que estuviera rompiendo ese patr√≥n en contra de las mejores pr√°cticas recomendadas).</p></blockquote><p>Pinia se ha deshecho de las mutaciones independientes por completo, brind√°ndonos m√°s opciones sobre c√≥mo elegimos mutar el estado.</p><h2 id="mutar-el-estado-de-pinia-con-acciones" tabindex="-1">Mutar el Estado de Pinia con Acciones <a class="header-anchor" href="#mutar-el-estado-de-pinia-con-acciones" aria-label="Permalink to &quot;Mutar el Estado de Pinia con Acciones&quot;">‚Äã</a></h2><blockquote><p>La forma m√°s com√∫n de mutar el estado usando Pinia es desencadenar una acci√≥n en la tienda que haga que se cambie el estado.</p></blockquote><p>En este ejemplo, hacer clic en el bot√≥n <strong>Add to Favorites</strong> activar√° la acci√≥n agregar a favoritos en la tienda de <code>favorites</code>.</p><p><code>üìÑ src/views/RestaurantView.vue</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;favoritesStore.addToFavorites(singleRestaurant.name)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Add to Favorites ‚ù§Ô∏è</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>La acci√≥n <code>addToFavorites</code> publica el favorito en la lista de favoritos del usuario.</p><p><code>üìÑ src/stores/favorites.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pinia&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useAuthStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFetch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../helpers/myFetch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> useFavoritesStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;favorites&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userFavorites: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  actions: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // This action mutates state by adding a favorite to userFavorites (that happens on the backend so the database is updated)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addToFavorites</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">restaurant_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAuthStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authStore.user.username;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        user: username,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        restaurant_name,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // The user&#39;s favorite will be added to the database</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      myFetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;favorites&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, body).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Cuando la solicitud de publicaci√≥n llega al punto final en el archivo del servidor, ejecuta m√°s l√≥gica para publicar el favorito en la base de datos (o en este caso, el archivo JSON que creamos para representar una base de datos).</p><p><code>üìÑ /server.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/favorites&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> favorites</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./db/favorites.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (req.body) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    favorites.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.body);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./db/favorites.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(favorites, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.body);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><blockquote><p>Este fue un ejemplo de una forma muy com√∫n de mutar el estado mediante el uso de una acci√≥n.</p></blockquote><p>Algunas personas se sorprenden cuando descubren que esta no es la √∫nica forma de cambiar el estado de Pinia. De hecho, he o√≠do hablar de personas que afirman que usar acciones es la √∫nica forma en que podemos mutar el estado en Pinia. ¬°Pero ese no es el caso!</p><h2 id="mutando-el-estado-directamente" tabindex="-1">Mutando el Estado Directamente <a class="header-anchor" href="#mutando-el-estado-directamente" aria-label="Permalink to &quot;Mutando el Estado Directamente&quot;">‚Äã</a></h2><blockquote><p>Tambi√©n podemos cambiar de estado directamente asignando un nuevo valor a la propiedad <code>state</code>.</p></blockquote><p>En el componente <code>Search.vue</code> de nuestra aplicaci√≥n <strong>Pinia Restaurants</strong>, hay un <code>watcher</code> en el valor de <code>city</code> para que, si el usuario elimina la ciudad, borre los datos de b√∫squeda para que pueda iniciar una nueva b√∫squeda.</p><p><code>üìÑ src/components/Search.vue</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">searchChoice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">restaurantDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> storeToRefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(restaurantsStore);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(city, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (newVal) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    restaurantDetails.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    searchChoice.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Se accede a las propiedades <code>restaurantDetails</code> y <code>searchChoice</code> desde la tienda <strong>restaurants</strong> y, como vemos aqu√≠, estas dos propiedades se establecen directamente en un arreglo vac√≠o y una cadena vac√≠a cuando cambia el valor de <code>city</code>. No estamos obligados a mutar estas propiedades de estado a trav√©s de una acci√≥n de Pinia. Podemos mutar directamente el estado aqu√≠ mismo en el componente.</p><h2 id="actualizacion-de-estado-con-patch" tabindex="-1">Actualizaci√≥n de estado con <code>$patch</code> <a class="header-anchor" href="#actualizacion-de-estado-con-patch" aria-label="Permalink to &quot;Actualizaci√≥n de estado con \`$patch\`&quot;">‚Äã</a></h2><blockquote><p>Otra forma en que podemos establecer el estado es usar el m√©todo <code>$patch</code> de Pinia. Este m√©todo nos permite aplicar m√∫ltiples cambios a la vez al estado de la tienda.</p></blockquote><p>Aqu√≠ est√° la misma l√≥gica, pero esta vez usando <code>$patch</code>:</p><p><code>üìÑ src/components/Search.vue</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(city, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (newVal) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    restaurantStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      restaurantDetails: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      searchChoice: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><blockquote><p>Aqu√≠, enviamos un objeto con los cambios que queremos a <code>restaurantDetails</code> y <code>searchChoice</code>.</p></blockquote><p>Si no le gusta la idea de mutar el estado directamente en un componente sin una acci√≥n, puede limitarse a usar solo <code>actions</code> y <code>$patch</code> para realizar cambios en los datos de la tienda.</p><p>Es f√°cil buscar <code>$patch</code> dentro de su c√≥digo o <code>actions</code> por su nombre.</p><p>Pero no olvide que siempre tenemos <strong>devtools</strong> para ayudarnos a rastrear los cambios en el estado, por lo que es posible que no necesitemos ser tan estrictos al agregar un patr√≥n autoimpuesto como ese para la mutaci√≥n del estado.</p><p>Ah, y <code>$patch</code> es especialmente √∫til porque puede tomar un objeto o una funci√≥n como su par√°metro.</p><p>A veces, es posible que necesitemos una l√≥gica m√°s complicada para actualizar el estado, como usar m√©todos de matriz para actualizar una propiedad de estado que es una matriz. Enviar una funci√≥n a trav√©s del m√©todo <code>$patch</code> nos brinda m√°s capacidad para hacer una l√≥gica compleja para mutar el estado.</p><p>Ejemplo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">restaurantsStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state.restaurantDetails.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, state.restaurantDetails.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state.searchChoice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="restablecer-estado-con-reset" tabindex="-1">Restablecer estado con <code>$reset</code> <a class="header-anchor" href="#restablecer-estado-con-reset" aria-label="Permalink to &quot;Restablecer estado con \`$reset\`&quot;">‚Äã</a></h2><blockquote><p>Convenientemente, Pinia tambi√©n ofrece un m√©todo <code>$reset</code> para que podamos restablecer el estado completo de una tienda a su valor inicial.</p></blockquote><p>En este ejemplo, el m√©todo <code>$reset</code> se usa dentro de la propia tienda. Dado que este ejemplo es una <strong>Options Store</strong>, podemos acceder al m√©todo <code>$reset</code> usando <code>this</code> para borrar el estado del usuario de la tienda de autenticaci√≥n. Esto restablece al usuario a un objeto vac√≠o.</p><p><code>üìÑ src/stores/auth.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Tambi√©n podr√≠amos usar <code>$reset</code> en un componente:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user &amp;&amp; user.username&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;authStore.$reset()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Log Out</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>Usar una funci√≥n de reinicio como esta es realmente √∫til si necesitamos actualizar una tienda completa a la vez, como cuando el usuario navega a una p√°gina determinada.</p></blockquote><p>Eche un vistazo a este ejemplo en el que usamos el m√©todo de reinicio de Pinia en el enrutador.</p><p><code>üìÑ src/router/index.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> restaurantsStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRestaurantsStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (to.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) restaurantsStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>S√≠, podemos acceder al estado de Pinia en un archivo de enrutador. Aqu√≠, si quisi√©ramos restablecer toda la informaci√≥n de <strong>restaurants</strong>, borrando una b√∫squeda anterior cuando un usuario navega de regreso a la p√°gina de inicio, podemos llamar a la funci√≥n <code>$reset</code> cada vez que alguien navega de regreso a la p√°gina de inicio.</p><h2 id="una-limitacion-de-los-setup-stores" tabindex="-1">Una limitaci√≥n de los Setup Stores <a class="header-anchor" href="#una-limitacion-de-los-setup-stores" aria-label="Permalink to &quot;Una limitaci√≥n de los Setup Stores&quot;">‚Äã</a></h2><blockquote><p>Desafortunadamente, el m√©todo <code>$reset</code> no est√° disponible si usamos una tienda <strong>Setup</strong>.</p></blockquote><p>¬°Aqu√≠ hay un ejemplo en el que las *<strong>Options Store</strong> tienen una ventaja sobre las <strong>Setup Store</strong>!</p><p>Esto se debe a que el m√©todo <code>$reset</code> se basa en la funci√≥n <code>state()</code> para crear un nuevo estado, reemplazando el <code>store.$state</code> actual por uno nuevo. Como no tenemos esa funci√≥n <code>state()</code> en una tienda <strong>Setup</strong>, Pinia no tiene forma de hacer esto.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// We have a state function in Options Store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userFavorites: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p>Sin embargo, esta podr√≠a ser una buena oportunidad para crear un complemento de Pinia (hablaremos m√°s sobre eso en la <a href="./pinia-plugins.html">pr√≥xima lecci√≥n</a>).</p></blockquote><p>Otra posibilidad ser√≠a simplemente crear nuestro propio m√©todo de reinicio para una tienda individual.</p><p>Por ejemplo, podr√≠amos crear una Acci√≥n que sirva para restablecer toda nuestra tienda. As√≠ es como podr√≠a verse, con una acci√≥n <code>resetRestaurantsStore</code> para borrar cada propiedad de estado en la tienda <strong>restaurants</strong>, restableciendo la tienda a su estado original. Solo necesitar√≠amos usar esto si nuestra tienda es una <strong>Setup Store</strong> y necesitamos una funci√≥n para restablecer todo el estado.</p><p><code>üìÑ src/stores/restaurants.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//action in a Setup Store</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resetRestaurantsStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    searchChoice.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    restaurantDetails.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    singleRestaurant.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textSearchResults.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loading.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="claridad-a-traves-de-devtools" tabindex="-1">Claridad a trav√©s de Devtools <a class="header-anchor" href="#claridad-a-traves-de-devtools" aria-label="Permalink to &quot;Claridad a trav√©s de Devtools&quot;">‚Äã</a></h2><blockquote><p>Estas son solo algunas de las formas en que podemos acceder y mutar el estado con Pinia. Si bien puede parecer mucho, tenga en cuenta que el soporte de <strong>devtools</strong> es excelente.</p></blockquote><p>Podemos ver cada propiedad de estado y actualizaci√≥n de <code>getter</code> en el panel de herramientas de desarrollo de Pinia, y vemos a qu√© tienda pertenecen.</p><p><img src="`+n+'" alt="mutating-state"></p><p>Y podemos ver cada <code>action</code> y <code>$patch</code> que ocurre si revisamos el panel de la l√≠nea de tiempo.</p><p><img src="'+t+'" alt="mutating-state"></p><h2 id="onaction" tabindex="-1">$onAction <a class="header-anchor" href="#onaction" aria-label="Permalink to &quot;$onAction&quot;">‚Äã</a></h2><blockquote><p>Mientras terminamos esta lecci√≥n, centr√©monos en una √∫ltima herramienta. Pinia tambi√©n ofrece un m√©todo √∫til que podemos usar para obtener informaci√≥n muy detallada sobre las acciones: el m√©todo <code>$onAction</code>.</p></blockquote><p>Como puede ver, este m√©todo tiene una serie de <strong>hooks</strong> que podemos usar para realizar alguna l√≥gica cuando ocurre una determinada acci√≥n.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$onAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">onError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Tenga en cuenta c√≥mo podemos pasar el estado como un segundo argumento, en caso de que lo necesitemos.</p><p>Aqu√≠ se utiliza para registrar informaci√≥n sobre qu√© acci√≥n se ha activado en el <code>authStore</code>.</p><p><code>üìÑ src/App.vue</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">authStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$onAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`Start &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot; with params [${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;, &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}].`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>En la consola, cuando el usuario inicia sesi√≥n con el nombre de usuario <code>&#39;srodg&#39;</code> y la contrase√±a <code>&#39;pw&#39;</code>, vemos que est√° registrado. Y vemos que cerrar sesi√≥n no requiere par√°metros.</p><p><img src="'+l+'" alt="mutating-state"></p><p>Pero probablemente rara vez necesitemos usar la consola para registrar esta informaci√≥n, ya que la tenemos toda en las <strong>devtools</strong>.</p><h2 id="a-continuacion" tabindex="-1">A continuaci√≥n ... <a class="header-anchor" href="#a-continuacion" aria-label="Permalink to &quot;A continuaci√≥n ...&quot;">‚Äã</a></h2><blockquote><p>Estamos casi al final del tutorial, pero tenemos una cosa m√°s de la que hablar: los complementos de Pinia. En la pr√≥xima lecci√≥n, aprenderemos c√≥mo agregar nuestros propios complementos creados por el usuario a Pinia para ayudarnos a hacer a√∫n m√°s.</p></blockquote>',79),o=[h];function k(r,d,E,c,u,g){return i(),a("div",null,o)}const F=s(p,[["render",k]]);export{m as __pageData,F as default};
